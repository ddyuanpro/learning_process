第一部分git的介绍
 1. Git是目前世界上最先进的分布式版本控制系统；
 2. 集中式和分布式版本控制系统有什么区别呢？
    先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，
    干完活了，再把自己的活推送给中央服务器。
   首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库。
   既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？
   比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
   和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，
   随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。

3.git安装的时候要自报家门
  $ git config --global user.name "Your Name"
  $ git config --global user.email "email@example.com"
  
第二部分git的使用
1.创建版本库
 1.1 版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，
  每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
 1.2. $ mkdir xxx 创建一个空目录
      $ git init   通过git init命令把这个目录变成Git可以管理的仓库：
      添加文件到git仓库
      1.2.1  $ git add xxx    用命令git add告诉Git，把文件添加到仓库：（注意：编写的文件一定要放在创建的空目录下）
      1.2.2  $ git commit -m "xxx"    用命令git commit告诉Git，把文件提交到仓库：
 1.3 为什么Git添加文件需要add，commit一共两步呢？
     因为commit可以一次提交很多文件，所以你可以多次add不同的文件
2.文件的修改
 2.1 $ git status    该命令可以让我们时刻掌握仓库当前的状态
     $ git diff xxx  该命令可以查看修改内容。
 2.2 $ git log       该命令显示从最近到最远的提交日志
     $ git log --pretty=oneline  该命令只显示出一部分的信息，其中你看到的一大串类似1094adb...的是commit id（版本号）
                                 （由于是分布式系统，版本号会是比较大的数）
3.版本回退                               
  3.1 首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本， 上一个版本就是HEAD^，上上一个版本就是HEAD^^，
     当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。                               
     $ git reset --hard HEAD^                            
     $ git reset --hard <版本号>   （版本号没必要写全，前几位就可以了，Git会自动去找。）
4. 工作区和缓存区
  git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。
  一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：                              
5. 管理修改                                 
 为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
 5.1 第一次修改 -> git add -> 第二次修改 -> git commit
     当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，
     所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。
 5.2 第一次修改 -> git add -> 第二次修改 -> git add -> git commit
     先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了：
6. 撤销修改
 6.1  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
 6.2  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，
             就回到了场景1，第二步按场景1操作。
 6.3  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
7.删除文件 
 7.1 从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
 7.2 git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
 
第三部分 远程仓库 
 1.本地git仓库和GitHub传输加密设置
  1.1 第1步：创建SSH Key。   $ ssh-keygen -t rsa -C "邮箱名"
   （可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，
    id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。）
  1.2 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
  1.3 第3步：点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key
  1.4 为什么GitHub需要SSH Key呢？
  因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，
  所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
    （当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
    只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。）
2.添加远程库
  2.1 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
         如：$ git remote add origin git@github.com:ddyuanpro/learning_process.git
  2.1 关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
  2.3 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
3.从远程库克隆
  3.1  要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
         如：$ git clone git@github.com:ddyuanpro/learning_process.git
  3.2  Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
  
第四部分 分支管理 
 1.创建与合并分支
  1.1 查看分支：git branch
  1.2 创建分支：git branch <name>
  1.3 切换分支：git checkout <name>
  1.4 创建+切换分支：git checkout -b <name> （一般情况下直接用1.4，合并使用1.2和1.3）
  1.5 合并某分支到当前分支：git merge <name>
  1.6 删除分支：git branch -d <name>
 2. 解决冲突
  2.1 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
  2.2 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
  2.3 用git log --graph命令可以看到分支合并图。
 3.分支管理策略 
  3.1 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
  3.2 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
      例如：$ git merge --no-ff -m "merge with no-ff" dev
 4.bug分支
  4.1修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
  4.2当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
 5.feature分支
  5.1 开发一个新feature，最好新建一个分支；
  5.2 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
 6.多人模式
  6.1 多人协作的工作模式通常是这样：  
  6.2 首先，可以试图用git push origin <branch-name>推送自己的修改；
  6.3 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
  6.4 如果合并有冲突，则解决冲突，并在本地提交；
  6.5 没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
  6.6 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
      用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
7.Rebase   
  7.1 rebase操作可以把本地未push的分叉提交历史整理成直线；
  7.2 rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

第五部分 标签管理
 tag（标签）就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
 1.创建标签
   1.1 命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
   1.2 命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
   1.3 命令git tag可以查看所有标签。
 2.操作标签
   2.1  命令git push origin <tagname>可以推送一个本地标签；
   2.2 命令git push origin --tags可以推送全部未推送过的本地标签；
   2.3 命令git tag -d <tagname>可以删除一个本地标签；
   2.4 命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
 
 
 
 
