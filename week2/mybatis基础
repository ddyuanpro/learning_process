mybatis 
 
 1.mybatis 介绍
   MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，
   而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。
   Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，
   并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。

 2. jdbc编程步骤：
	2.1	加载数据库驱动
	2.2	创建并获取数据库链接
	2.3	创建jdbc statement对象
	2.4	设置sql语句
	2.5	设置sql语句中的参数(使用preparedStatement)
	2.6	通过statement执行sql并获取结果
	2.7	对sql执行结果进行解析处理
	2.8	释放资源(resultSet、preparedstatement、connection)
	    标准程序如下：
			public static void main(String[] args) {
				Connection connection = null;
				PreparedStatement preparedStatement = null;
				ResultSet resultSet = null;

				try {
					// 加载数据库驱动
					Class.forName("com.mysql.jdbc.Driver");

					// 通过驱动管理类获取数据库链接
					connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8", "root", "root");
					// 定义sql语句 ?表示占位符
					String sql = "select * from user where username = ?";
					// 获取预处理statement
					preparedStatement = connection.prepareStatement(sql);
					// 设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值
					preparedStatement.setString(1, "王五");
					// 向数据库发出sql执行查询，查询出结果集
					resultSet = preparedStatement.executeQuery();
					// 遍历查询结果集
					while (resultSet.next()) {
						System.out.println(resultSet.getString("id") + "  " + resultSet.getString("username"));
					}
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					// 释放资源
					if (resultSet != null) {
						try {
							resultSet.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
					if (preparedStatement != null) {
						try {
							preparedStatement.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
					if (connection != null) {
						try {
							connection.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
				}
				
		2.9 jdbc问题总结如下：
			1、	数据库连接创建、释放频繁造成系统资源浪费，从而影响系统性能。如果使用数据库连接池可解决此问题。
			2、	Sql语句在代码中硬编码，造成代码不易维护，实际应用中sql变化的可能较大，sql变动需要改变java代码。
			3、	使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，
				   修改sql还要修改代码，系统不易维护。
			4、	对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，
				如果能将数据库记录封装成pojo对象解析比较方便。
				
	3. Mybatis架构
		1、mybatis配置SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。
			 mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。
		2、通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂
		3、由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。
		4、mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。
		5、Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。
			  mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。
		6、Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement
			  在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。
		7、Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement
			  在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。
				
	4.输入映射和输出映射
		Mapper.xml映射文件中定义了操作数据库的sql，每个sql是一个statement，映射文件是mybatis的核心。
		4.1 parameterType(输入类型)	如 int ，string,pojo 
		4.2 resultType(输出类型)：声明输出结果的类型，若是pojo应该填写pojo的全路径 
		4.3 #{}和${}
				#{}表示一个占位符号，通过#{}可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换。
				#{}可以有效防止sql注入。 #{}可以接收简单类型值或pojo属性值。 如果parameterType传输单个简单类型值，
				#{}括号中可以是value或其它名称。
				
				${}表示拼接sql串，通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换， 
				${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，${}括号中只能是value。
			例如：在mapper.xml中的配置
			1. <select id="queryUserById" parameterType="int"
					resultType="cn.itcast.mybatis.pojo.User">
					SELECT * FROM `user` WHERE id  = #{id}
				</select>

			2. <!-- 如果传入的参数是简单数据类型，${}里面必须写value -->
				<select id="queryUserByUsername2" parameterType="string"
					resultType="cn.itcast.mybatis.pojo.User">
					SELECT * FROM `user` WHERE username LIKE '%${value}%'
				</select>
				
	5. Mybatis解决jdbc编程的问题
		5.1	数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。
			解决：在SqlMapConfig.xml中配置数据连接池，使用连接池管理数据库链接。
		5.2	Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。
			解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。
		5.3	向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。
			解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。
		5.4	对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。
			解决：Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。
				
	6. 测试程序：
		测试程序步骤：
		 1. 创建SqlSessionFactoryBuilder对象
		 2. 加载SqlMapConfig.xml配置文件
		 3. 创建SqlSessionFactory对象
		 4. 创建SqlSession对象
		 5. 执行SqlSession对象执行查询，获取结果User
		 6. 打印结果
		 7. 释放资源
			
				
				
				
				
				
				
				
				
				
				
			}
